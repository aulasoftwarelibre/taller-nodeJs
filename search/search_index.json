{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taller de NodeJS \u00b6 Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . El contenido de este taller se basa en experiencia propia y en las referencias que pueden encontrarse en la secci\u00f3n de Referencias Warning Este taller no debe de verse como un curso de programaci\u00f3n. No vas a aprender a programar JavaScript o TypeScript en este taller. Info Ser\u00e1 introductorio a la herramienta node para que despu\u00e9s de tener estos conocimientos puedas utilizar la herramienta en tus propios desarrollos. Contenidos \u00b6 Introducci\u00f3n: \u00bfQu\u00e9 es NodeJs y para que nos sirve? Instalaci\u00f3n de Node y NPM Crear nuestro primer proyecto en NodeJs Todo lo que debes saber del archivo package.json Paquetes NPM - Reutiliza los avances de la comunidad Ejemplos de paquetes NPM nodemon / pm2 / fs (fs-extra) / dotenv / shelljs Frameworks, el potencial de JavaScript Angular / React / Vue / Express Menci\u00f3n especial al paquete de TypeScript Agradecimientos \u00b6 Este curso ha sido impartido por: Adri\u00e1n Leiva Licencia \u00b6 El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Taller de NodeJS"},{"location":"#taller-de-nodejs","text":"Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . El contenido de este taller se basa en experiencia propia y en las referencias que pueden encontrarse en la secci\u00f3n de Referencias Warning Este taller no debe de verse como un curso de programaci\u00f3n. No vas a aprender a programar JavaScript o TypeScript en este taller. Info Ser\u00e1 introductorio a la herramienta node para que despu\u00e9s de tener estos conocimientos puedas utilizar la herramienta en tus propios desarrollos.","title":"Taller de NodeJS"},{"location":"#contenidos","text":"Introducci\u00f3n: \u00bfQu\u00e9 es NodeJs y para que nos sirve? Instalaci\u00f3n de Node y NPM Crear nuestro primer proyecto en NodeJs Todo lo que debes saber del archivo package.json Paquetes NPM - Reutiliza los avances de la comunidad Ejemplos de paquetes NPM nodemon / pm2 / fs (fs-extra) / dotenv / shelljs Frameworks, el potencial de JavaScript Angular / React / Vue / Express Menci\u00f3n especial al paquete de TypeScript","title":"Contenidos"},{"location":"#agradecimientos","text":"Este curso ha sido impartido por: Adri\u00e1n Leiva","title":"Agradecimientos"},{"location":"#licencia","text":"El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Licencia"},{"location":"crearProyecto/","text":"Crear nuestro primer proyecto en NodeJs \u00b6 Inicializar un proyecto \u00b6 Para iniciar nuestro proyecto de node utilizaremos la herramienta $ npm init Y nos comenzar\u00e1 a pedir informacion sobre nuestro proyecto, tales como nombre, licencia, version etc... Cada parametro tiene su valor por defecto el cual viene entre parentesis al lado del parametro, si no introducimos nada se setear\u00e1 dicho valor. Si no tiene valor por defecto es un campo que podremos dejar vacio. Otra opcion que tenemos ser\u00e1 utilizar la opcion -y junto a npm init, lo que generar\u00e1 un package.json con los valores por defecto sin preguntar nada. $ npm init -y Ejemplo de aplicacion \u00b6 Un ejemplo de una aplicaci\u00f3n node podria ser el siguiente, donde se crea un servidor http. const http = require ( 'http' ) const hostname = '127.0.0.1' const port = 3000 const server = http . createServer ( ( req , res ) => { res . statusCode = 200 res . setHeader ( 'Content-Type' , 'text-plain' ) res . end ( 'Este es mi primer servidor en node!\\n' ) }) server . listen ( port , hostname , () => { console . log ( `Server runnint at https:// ${ hostname } : ${ port } /` ) }) Esta seria la salida que tendriamos en localhost.","title":"Crear nuestro primer proyecto en NodeJs"},{"location":"crearProyecto/#crear-nuestro-primer-proyecto-en-nodejs","text":"","title":"Crear nuestro primer proyecto en NodeJs"},{"location":"crearProyecto/#inicializar-un-proyecto","text":"Para iniciar nuestro proyecto de node utilizaremos la herramienta $ npm init Y nos comenzar\u00e1 a pedir informacion sobre nuestro proyecto, tales como nombre, licencia, version etc... Cada parametro tiene su valor por defecto el cual viene entre parentesis al lado del parametro, si no introducimos nada se setear\u00e1 dicho valor. Si no tiene valor por defecto es un campo que podremos dejar vacio. Otra opcion que tenemos ser\u00e1 utilizar la opcion -y junto a npm init, lo que generar\u00e1 un package.json con los valores por defecto sin preguntar nada. $ npm init -y","title":"Inicializar un proyecto"},{"location":"crearProyecto/#ejemplo-de-aplicacion","text":"Un ejemplo de una aplicaci\u00f3n node podria ser el siguiente, donde se crea un servidor http. const http = require ( 'http' ) const hostname = '127.0.0.1' const port = 3000 const server = http . createServer ( ( req , res ) => { res . statusCode = 200 res . setHeader ( 'Content-Type' , 'text-plain' ) res . end ( 'Este es mi primer servidor en node!\\n' ) }) server . listen ( port , hostname , () => { console . log ( `Server runnint at https:// ${ hostname } : ${ port } /` ) }) Esta seria la salida que tendriamos en localhost.","title":"Ejemplo de aplicacion"},{"location":"instalacion/","text":"Instalaci\u00f3n de Node y NPM \u00b6 Instalaci\u00f3n \u00b6 Warning Cada distribuci\u00f3n de linux es un mundo, aqui solo veremos como instalarlo en un equipo con el gestor de paquetes apt o con el gestor de paquetes pacman, aunque ser\u00e1 muy similar la instalaci\u00f3n en cualquier equipo linux. Para instalar nodeJs en linux, podremos instalarlo mediante apt o pacman sin problemas. En Ubuntu o cualquier distro con apt utilizaremos: $ sudo apt install nodejs $ sudo apt install npm En Arch utilizaremos el mismo comando pero utilizando pacman: $ sudo pacman -S nodejs $ sudo pacman -S npm Para comprobar la version que tenemos de node o npm podremos utilizar los comandos: $ node -v $ node --version $ npm -v $ npm --version Desinstalaci\u00f3n \u00b6 Para desinstalar node y npm solo tendremos que utlizar el siguiente comando: $ sudo apt-get remove nodejs $ sudo pacman -R nodejs Controla que version exacta usas con NVM \u00b6 Si quisieramos poder cambiar la version de node en cualquier momento deberemos de utilizar la herramienta nvm Para instalar nvm necesitaremos previamente wget Podemos comprobar si tenemos wget instalado simplemente escribiendo wget en la consola. En caso de no tener wget, se instalar\u00e1 con: $ sudo apt install wget $ sudo pacman -S wget Para instalar nvm utilizaremos: $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash $ source ~/.profile Para saber las versiones de node disponibles utilizaremos: $ nvm ls-remote Para instalar una version en especifico utilizaremos: $ nvm install ${numeroVersion} Para desinstalar node en caso que quisieramos primero tendremos que desactivar nvm con: $ nvm deactivate Y desinstalar las versiones de node que utilizemos con: $ nvm uninstall ${numeroVersion}","title":"Instalaci\u00f3n de\u00a0Node\u00a0y NPM"},{"location":"instalacion/#instalacion-de-node-y-npm","text":"","title":"Instalaci\u00f3n de\u00a0Node\u00a0y NPM"},{"location":"instalacion/#instalacion","text":"Warning Cada distribuci\u00f3n de linux es un mundo, aqui solo veremos como instalarlo en un equipo con el gestor de paquetes apt o con el gestor de paquetes pacman, aunque ser\u00e1 muy similar la instalaci\u00f3n en cualquier equipo linux. Para instalar nodeJs en linux, podremos instalarlo mediante apt o pacman sin problemas. En Ubuntu o cualquier distro con apt utilizaremos: $ sudo apt install nodejs $ sudo apt install npm En Arch utilizaremos el mismo comando pero utilizando pacman: $ sudo pacman -S nodejs $ sudo pacman -S npm Para comprobar la version que tenemos de node o npm podremos utilizar los comandos: $ node -v $ node --version $ npm -v $ npm --version","title":"Instalaci\u00f3n"},{"location":"instalacion/#desinstalacion","text":"Para desinstalar node y npm solo tendremos que utlizar el siguiente comando: $ sudo apt-get remove nodejs $ sudo pacman -R nodejs","title":"Desinstalaci\u00f3n"},{"location":"instalacion/#controla-que-version-exacta-usas-con-nvm","text":"Si quisieramos poder cambiar la version de node en cualquier momento deberemos de utilizar la herramienta nvm Para instalar nvm necesitaremos previamente wget Podemos comprobar si tenemos wget instalado simplemente escribiendo wget en la consola. En caso de no tener wget, se instalar\u00e1 con: $ sudo apt install wget $ sudo pacman -S wget Para instalar nvm utilizaremos: $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash $ source ~/.profile Para saber las versiones de node disponibles utilizaremos: $ nvm ls-remote Para instalar una version en especifico utilizaremos: $ nvm install ${numeroVersion} Para desinstalar node en caso que quisieramos primero tendremos que desactivar nvm con: $ nvm deactivate Y desinstalar las versiones de node que utilizemos con: $ nvm uninstall ${numeroVersion}","title":"Controla que version exacta usas con NVM"},{"location":"introduccion/","text":"Introduccion: \u00bfQu\u00e9 es NodeJs y para que nos sirve? \u00b6 \u00bfQue es nodeJs? \u00b6 NodeJs es una herramienta que nos brinda la posibilidad de correr JavaScript de forma as\u00edncrona en el lado del servidor, lo que nos permite utilizar JS en cualquier tipo de proyecto gracias a esta herramienta. Warning NodeJS no es un lenguaje de programaci\u00f3n, es una herramienta que nos permitir\u00e1 llevar JavaScript a otro nivel! NodeJs corre con el motor de JavaScript V.8, el n\u00facleo de google chrome, esto ayuda a node a tener un muy alto rendimiento. Una aplicacion de Node utilizar\u00e1 un solo proceso, sin utilizar un nuevo hilo para cada petici\u00f3n. Como ya se mencion\u00f3 antes, node correr\u00e1 mayormente de forma as\u00edncrona, ya que todas sus librerias estan escritas con el paradigma enfocado en no bloquear nunca la aplicacion. De esta forma la aplicacion se bloquear\u00e1 unicamente con las excepciones. Un poquito de historia \u00b6 Node es una tecnologia muy joven, al diferencia de JavaScript que surgio hace 25 a\u00f1os o la Web que surgi\u00f3 hace ya 32 a\u00f1os... Node surgi\u00f3 hace 12 a\u00f1os, en 2009, de la mano de Ryan Dahl. En enero de 2010 un gestor de paquetes para nodejs apareci\u00f3, este seria npm. NodeJS en un principio solo era soportado por sistemas LINUX y MAC OS X pero en 2011 Microsoft y Joyent se encargaron de traer node a Windows.","title":"Introduccion: \u00bfQu\u00e9 es NodeJs y para que nos sirve?"},{"location":"introduccion/#introduccion-que-es-nodejs-y-para-que-nos-sirve","text":"","title":"Introduccion: \u00bfQu\u00e9 es NodeJs y para que nos sirve?"},{"location":"introduccion/#que-es-nodejs","text":"NodeJs es una herramienta que nos brinda la posibilidad de correr JavaScript de forma as\u00edncrona en el lado del servidor, lo que nos permite utilizar JS en cualquier tipo de proyecto gracias a esta herramienta. Warning NodeJS no es un lenguaje de programaci\u00f3n, es una herramienta que nos permitir\u00e1 llevar JavaScript a otro nivel! NodeJs corre con el motor de JavaScript V.8, el n\u00facleo de google chrome, esto ayuda a node a tener un muy alto rendimiento. Una aplicacion de Node utilizar\u00e1 un solo proceso, sin utilizar un nuevo hilo para cada petici\u00f3n. Como ya se mencion\u00f3 antes, node correr\u00e1 mayormente de forma as\u00edncrona, ya que todas sus librerias estan escritas con el paradigma enfocado en no bloquear nunca la aplicacion. De esta forma la aplicacion se bloquear\u00e1 unicamente con las excepciones.","title":"\u00bfQue es nodeJs?"},{"location":"introduccion/#un-poquito-de-historia","text":"Node es una tecnologia muy joven, al diferencia de JavaScript que surgio hace 25 a\u00f1os o la Web que surgi\u00f3 hace ya 32 a\u00f1os... Node surgi\u00f3 hace 12 a\u00f1os, en 2009, de la mano de Ryan Dahl. En enero de 2010 un gestor de paquetes para nodejs apareci\u00f3, este seria npm. NodeJS en un principio solo era soportado por sistemas LINUX y MAC OS X pero en 2011 Microsoft y Joyent se encargaron de traer node a Windows.","title":"Un poquito de historia"},{"location":"packageJson/","text":"Todo lo que debes saber del archivo package.json \u00b6 El archivo package.json nos servir\u00e1 de gran ayuda en cualquier proyecto, nos permitir\u00e1 crear scripts y controlar mucho mejor este mismo. Al iniciar un proyecto, nuestro package.json se ver\u00e1 algo parecido a esto: { \"name\" : \"mynewapp\" , \"version\" : \"1.0.0\" , \"description\" : \"Esto es una descripcion\" , \"main\" : \"index.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"ejemplo\" , \"tallernodejs\" ], \"author\" : \"leivaa21\" , \"license\" : \"ISC\" } Un ejemplo de package.json m\u00e1s trabajado podria ser el siguiente. { \"name\" : \"leivaastdio\" , \"version\" : \"1.0.0\" , \"description\" : \"This is a bot developed for administrate a discord server. Made while learning about JS and some libraries. By Leivaa\" , \"main\" : \"src/index.js\" , \"scripts\" : { \"start\" : \"pm2 flush LeivaaDiscordJS && pm2 start src/index.js --name LeivaaDiscordJS\" , \"restart\" : \"npm stop && npm start\" , \"dev\" : \"pm2 flush LeivaaDiscordJS && pm2 start src/index.js --name LeivaaDiscordJS --watch && npm run logs\" , \"stop\" : \"pm2 stop LeivaaDiscordJS && pm2 delete LeivaaDiscordJS\" , \"logs\" : \"pm2 logs --name LeivaDiscordJS\" , \"status\" : \"pm2 status --name LeivaDiscordJS\" , \"list\" : \"pm2 list\" }, \"keywords\" : [], \"author\" : \"Leivaa21\" , \"license\" : \"MIT\" , \"dependencies\" : { \"discord.js\" : \"^12.5.1\" , \"emoji-regex\" : \"^10.0.0\" , \"esm\" : \"^3.2.25\" , \"fs\" : \"0.0.1-security\" , \"pm2\" : \"^5.1.2\" , \"replace-json-property\" : \"^1.7.1\" }, \"devDependencies\" : { \"dotenv\" : \"^8.2.0\" } } Como podemos ver, el package.json ser\u00e1 el archivo donde node guardar\u00e1 toda la informaci\u00f3n sobre nuestro proyecto, asi como sus dependencias, licencia, autor, scripts, etc... Creacion de scripts en npm \u00b6 Para crear un script con npm solo tendremos que a\u00f1adirlo al package.json en la propiedad \"scripts\" con el formato \"Nombre\": \"comando a ejecutar\" Y para ejecutar el script utilizaremos: $ npm run Nombre npm start, stop & restart \u00b6 Node reserva los scripts start, restart y stop por lo que podremos utilizarlos sin run, es decir $ npm start $ npm stop $ npm restart Scripts pre y post \u00b6 Adem\u00e1s tambien podremos setear scripts que se ejecuten siempre antes o despues de un script en especifico de manera autom\u00e1tica. Para ello solo tendremos que seguir el formato: \"preNombre\": \"comando a ejecutar antes del script Nombre\" \"Nombre\": \"comando a ejecutar\" \"postNombre\": \"comando a ejecutar despues del script Nombre\" De esta forma, al ejecutar npm run Nombre se ejecutar\u00e1 preNombre, Nombre y postNombre en ese orden. Info No es necesario crear un pre y post de cada script, de hecho podremos tener scripts con solo pre, con solo post, con ambos o con ninguno de los dos! Dependencias \u00b6 Que las dependencias esten reflejadas en el package.json nos permitir\u00e1 descargar un proyecto sin sus dependencias instaladas (sin tener la carpeta /node_modules) y que tan solo utilizando npm install nos instale todas las dependencias necesarias, lo que nos dar\u00e1 una salida similar a esta: Importancia de la licencias \u00b6 Una licencia determinar\u00e1 que se puede y que no se puede hacer con tu codigo, por lo que es altamente recomendable utilizar una licencia que se ajuste a tus intenciones.","title":"Todo lo que debes saber del archivo package.json"},{"location":"packageJson/#todo-lo-que-debes-saber-del-archivo-packagejson","text":"El archivo package.json nos servir\u00e1 de gran ayuda en cualquier proyecto, nos permitir\u00e1 crear scripts y controlar mucho mejor este mismo. Al iniciar un proyecto, nuestro package.json se ver\u00e1 algo parecido a esto: { \"name\" : \"mynewapp\" , \"version\" : \"1.0.0\" , \"description\" : \"Esto es una descripcion\" , \"main\" : \"index.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"ejemplo\" , \"tallernodejs\" ], \"author\" : \"leivaa21\" , \"license\" : \"ISC\" } Un ejemplo de package.json m\u00e1s trabajado podria ser el siguiente. { \"name\" : \"leivaastdio\" , \"version\" : \"1.0.0\" , \"description\" : \"This is a bot developed for administrate a discord server. Made while learning about JS and some libraries. By Leivaa\" , \"main\" : \"src/index.js\" , \"scripts\" : { \"start\" : \"pm2 flush LeivaaDiscordJS && pm2 start src/index.js --name LeivaaDiscordJS\" , \"restart\" : \"npm stop && npm start\" , \"dev\" : \"pm2 flush LeivaaDiscordJS && pm2 start src/index.js --name LeivaaDiscordJS --watch && npm run logs\" , \"stop\" : \"pm2 stop LeivaaDiscordJS && pm2 delete LeivaaDiscordJS\" , \"logs\" : \"pm2 logs --name LeivaDiscordJS\" , \"status\" : \"pm2 status --name LeivaDiscordJS\" , \"list\" : \"pm2 list\" }, \"keywords\" : [], \"author\" : \"Leivaa21\" , \"license\" : \"MIT\" , \"dependencies\" : { \"discord.js\" : \"^12.5.1\" , \"emoji-regex\" : \"^10.0.0\" , \"esm\" : \"^3.2.25\" , \"fs\" : \"0.0.1-security\" , \"pm2\" : \"^5.1.2\" , \"replace-json-property\" : \"^1.7.1\" }, \"devDependencies\" : { \"dotenv\" : \"^8.2.0\" } } Como podemos ver, el package.json ser\u00e1 el archivo donde node guardar\u00e1 toda la informaci\u00f3n sobre nuestro proyecto, asi como sus dependencias, licencia, autor, scripts, etc...","title":"Todo lo que debes saber del archivo package.json"},{"location":"packageJson/#creacion-de-scripts-en-npm","text":"Para crear un script con npm solo tendremos que a\u00f1adirlo al package.json en la propiedad \"scripts\" con el formato \"Nombre\": \"comando a ejecutar\" Y para ejecutar el script utilizaremos: $ npm run Nombre","title":"Creacion de scripts en npm"},{"location":"packageJson/#npm-start-stop-restart","text":"Node reserva los scripts start, restart y stop por lo que podremos utilizarlos sin run, es decir $ npm start $ npm stop $ npm restart","title":"npm start, stop &amp; restart"},{"location":"packageJson/#scripts-pre-y-post","text":"Adem\u00e1s tambien podremos setear scripts que se ejecuten siempre antes o despues de un script en especifico de manera autom\u00e1tica. Para ello solo tendremos que seguir el formato: \"preNombre\": \"comando a ejecutar antes del script Nombre\" \"Nombre\": \"comando a ejecutar\" \"postNombre\": \"comando a ejecutar despues del script Nombre\" De esta forma, al ejecutar npm run Nombre se ejecutar\u00e1 preNombre, Nombre y postNombre en ese orden. Info No es necesario crear un pre y post de cada script, de hecho podremos tener scripts con solo pre, con solo post, con ambos o con ninguno de los dos!","title":"Scripts pre y post"},{"location":"packageJson/#dependencias","text":"Que las dependencias esten reflejadas en el package.json nos permitir\u00e1 descargar un proyecto sin sus dependencias instaladas (sin tener la carpeta /node_modules) y que tan solo utilizando npm install nos instale todas las dependencias necesarias, lo que nos dar\u00e1 una salida similar a esta:","title":"Dependencias"},{"location":"packageJson/#importancia-de-la-licencias","text":"Una licencia determinar\u00e1 que se puede y que no se puede hacer con tu codigo, por lo que es altamente recomendable utilizar una licencia que se ajuste a tus intenciones.","title":"Importancia de la licencias"},{"location":"paquetesNPM/","text":"Paquetes NPM - Reutiliza los avances de la comunidad \u00b6 NodeJS es una plataforma de bajo nivel, esto significa que funciona como soporte de otras herramientas, para hacer las cosas m\u00e1s sencillas existen librerias creadas por la comunidad. Con npm tenemos acceso a m\u00e1s de 1,000,000 de librerias de codigo libre las cuales puedes utilizar. Dentro de estos toda esta cantidad de librerias o paquetes, podremos distinguir infinidad de tipos: Paquetes enfocados en facilitar el desarrollo de aplicaciones \u00b6 nodemon nos permitir\u00e1 correr nuestra aplicacion de forma que cuando actualizemos un fichero se reiniciar\u00e1 el programa para facilitarnos el desarrollo. pm2 funciona como un gestor de procesos que nos permitir\u00e1 que nuestra aplicacion se reinicie en cuanto suceda una excepcion, nos permitir\u00e1 monitorear la aplicacion o correrla en segundo plano dotenv nos permitir\u00e1 tener variables privadas en un fichero externo .env, esto nos servir\u00e1 por si tenemos variables que no queremos que se vea su contenido al subir el codigo a github por ejemplo Paquetes enfocados en funcionalidades para tu aplicacion \u00b6 shelljs nos permitir\u00e1 programar scripts de bash en node fs nos permitir\u00e1 tratar con ficheros Paquetes orientados a hacer una aplicacion web m\u00e1s especifica - FrameWorks \u00b6 Warning Una aplicacion web no tiene por que significar siempre pagina web. Info Discord es una aplicacion web hecha en React por ejemplo! Esto es gracias a que node y sus frameworks pueden hacer que entornos web funcionen de forma interna en tu ordenador y no necesiten un buscador web! Frontend FrameWorks \u00b6 React.Js Angular.Js Vue.Js Backend FrameWorks \u00b6 Express.js Nest.js Socket.io Instalacion de paquetes NPM \u00b6 Para instalar un paquete de npm tan solo tendremos que utilizar el comando $ npm install nombre Si queremos instalar un paquete de manera global en nuestro equipo utilizaremos $ npm install nombre -g Una vez instalemos alg\u00fan paquete npm este aparecer\u00e1 en una carpeta llamada ./node_modules en nuestro proyecto y se registrar\u00e1 el modulo utilizado en nuestro fichero package.json . Utilizar un paquete NPM en nuestra aplicacion \u00b6 Para este ejemplo utilizaremos el paquete shelljs Para instalarlo utilizaremos npm install shelljs De esta forma en nuestro fichero package.json quedar\u00e1 registrado nuestra dependencia { \"name\" : \"mynewapp\" , \"version\" : \"1.0.0\" , \"description\" : \"Esto es una descripcion\" , \"main\" : \"index.js\" , \"scripts\" : { \"test\" : \"test \\n\"\"\" }, \"keywords\" : [ \"ejemplo\" , \"tallernodejs\" ], \"author\" : \"leivaa21\" , \"license\" : \"ISC\" , \"dependencies\" :{ \"shelljs\" : \"^0.8.4\" } } Para el ejemplo tenemos este peque\u00f1o programa que creara una carpeta, la copiar\u00e1 y pondra dos mensajes por consola. const shelljs = require ( 'shelljs' ) shelljs . echo ( \"Creamos una carpeta de ejemplo y una copia de seguridad\" ) shelljs . mkdir ( \"../CarpetaDeEjemplo\" ) shelljs . cp ( \"-R\" , \"../CarpetaDeEjemplo\" , \"../CopiaDeSeguridad\" ) shelljs . echo ( \"He terminado\" ) Al ejecutar este codigo obtendremos esta salida por consola Y a su vez podremos ver que se han creado ambas carpetas","title":"Paquetes NPM - Reutiliza los avances de la comunidad"},{"location":"paquetesNPM/#paquetes-npm-reutiliza-los-avances-de-la-comunidad","text":"NodeJS es una plataforma de bajo nivel, esto significa que funciona como soporte de otras herramientas, para hacer las cosas m\u00e1s sencillas existen librerias creadas por la comunidad. Con npm tenemos acceso a m\u00e1s de 1,000,000 de librerias de codigo libre las cuales puedes utilizar. Dentro de estos toda esta cantidad de librerias o paquetes, podremos distinguir infinidad de tipos:","title":"Paquetes NPM - Reutiliza los avances de la comunidad"},{"location":"paquetesNPM/#paquetes-enfocados-en-facilitar-el-desarrollo-de-aplicaciones","text":"nodemon nos permitir\u00e1 correr nuestra aplicacion de forma que cuando actualizemos un fichero se reiniciar\u00e1 el programa para facilitarnos el desarrollo. pm2 funciona como un gestor de procesos que nos permitir\u00e1 que nuestra aplicacion se reinicie en cuanto suceda una excepcion, nos permitir\u00e1 monitorear la aplicacion o correrla en segundo plano dotenv nos permitir\u00e1 tener variables privadas en un fichero externo .env, esto nos servir\u00e1 por si tenemos variables que no queremos que se vea su contenido al subir el codigo a github por ejemplo","title":"Paquetes enfocados en facilitar el desarrollo de aplicaciones"},{"location":"paquetesNPM/#paquetes-enfocados-en-funcionalidades-para-tu-aplicacion","text":"shelljs nos permitir\u00e1 programar scripts de bash en node fs nos permitir\u00e1 tratar con ficheros","title":"Paquetes enfocados en funcionalidades para tu aplicacion"},{"location":"paquetesNPM/#paquetes-orientados-a-hacer-una-aplicacion-web-mas-especifica-frameworks","text":"Warning Una aplicacion web no tiene por que significar siempre pagina web. Info Discord es una aplicacion web hecha en React por ejemplo! Esto es gracias a que node y sus frameworks pueden hacer que entornos web funcionen de forma interna en tu ordenador y no necesiten un buscador web!","title":"Paquetes orientados a hacer una aplicacion web m\u00e1s especifica - FrameWorks"},{"location":"paquetesNPM/#frontend-frameworks","text":"React.Js Angular.Js Vue.Js","title":"Frontend FrameWorks"},{"location":"paquetesNPM/#backend-frameworks","text":"Express.js Nest.js Socket.io","title":"Backend FrameWorks"},{"location":"paquetesNPM/#instalacion-de-paquetes-npm","text":"Para instalar un paquete de npm tan solo tendremos que utilizar el comando $ npm install nombre Si queremos instalar un paquete de manera global en nuestro equipo utilizaremos $ npm install nombre -g Una vez instalemos alg\u00fan paquete npm este aparecer\u00e1 en una carpeta llamada ./node_modules en nuestro proyecto y se registrar\u00e1 el modulo utilizado en nuestro fichero package.json .","title":"Instalacion de paquetes NPM"},{"location":"paquetesNPM/#utilizar-un-paquete-npm-en-nuestra-aplicacion","text":"Para este ejemplo utilizaremos el paquete shelljs Para instalarlo utilizaremos npm install shelljs De esta forma en nuestro fichero package.json quedar\u00e1 registrado nuestra dependencia { \"name\" : \"mynewapp\" , \"version\" : \"1.0.0\" , \"description\" : \"Esto es una descripcion\" , \"main\" : \"index.js\" , \"scripts\" : { \"test\" : \"test \\n\"\"\" }, \"keywords\" : [ \"ejemplo\" , \"tallernodejs\" ], \"author\" : \"leivaa21\" , \"license\" : \"ISC\" , \"dependencies\" :{ \"shelljs\" : \"^0.8.4\" } } Para el ejemplo tenemos este peque\u00f1o programa que creara una carpeta, la copiar\u00e1 y pondra dos mensajes por consola. const shelljs = require ( 'shelljs' ) shelljs . echo ( \"Creamos una carpeta de ejemplo y una copia de seguridad\" ) shelljs . mkdir ( \"../CarpetaDeEjemplo\" ) shelljs . cp ( \"-R\" , \"../CarpetaDeEjemplo\" , \"../CopiaDeSeguridad\" ) shelljs . echo ( \"He terminado\" ) Al ejecutar este codigo obtendremos esta salida por consola Y a su vez podremos ver que se han creado ambas carpetas","title":"Utilizar un paquete NPM en nuestra aplicacion"},{"location":"referencias/","text":"Paginas consultadas para realizar este taller \u00b6 Para la documentaci\u00f3n de este taller se han consultado los siguientes sitios web. Adem\u00e1s del conocimiento propio sobre la herramienta. nodejs.org nodejs.dev/learn","title":"Paginas consultadas para realizar este taller"},{"location":"referencias/#paginas-consultadas-para-realizar-este-taller","text":"Para la documentaci\u00f3n de este taller se han consultado los siguientes sitios web. Adem\u00e1s del conocimiento propio sobre la herramienta. nodejs.org nodejs.dev/learn","title":"Paginas consultadas para realizar este taller"},{"location":"typescript/","text":"Menci\u00f3n especial a TypeScript \u00b6 Como menci\u00f3n especial, decir que NodeJs tambien es compatible con TypeScript, por lo que podremos desarrollar nuestros proyectos de manera segura y tipada con typescript y luego correrlos en un entorno de nodejs como si de javascript se tratase. Info TypeScript fue desarrollado por Microsoft en 2012. Typescript NO es un lenguaje de programacion en si mismo, si no que es un superset que a\u00f1adido a JavaScript forma TypeScript. Por este motivo TypeScript necesita ser compilado en JavaScript para correr correctamente. Info Algunos paquetes npm estan 100% pensados para JavaScript y no soportar\u00e1n el tipado de typescript, pero una gran cantidad de paquetes si lo soportar\u00e1n! Instalar TypeScript \u00b6 Para instalar typescript de manera global en nuestro PC utilizaremos el comando $ sudo npm typescript -g Crear un proyecto en NodeJs utilizando Ts \u00b6 Primero crearemos nuestro proyecto de node con npm init Una vez tengamos el proyecto de node, inicializaremos nuestro proyecto de typescript con tsc --init $ npm init $ tsc --init Esto nos creara el archivo de configuracion de typescript tsconfig.json En este archivo buscaremos en la linea 50 la propiedad \"outDir\" y la descomentaremos. Utilizaremos como directorio de salida por ejemplo el directorio /build, para ello: \"outDir\": \"./build\" Y configuraremos algunas cosas del package.json : { \"name\" : \"ejemplo2\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"build/index.js\" , \"scripts\" : { \"prestart\" : \"tsc -b\" , \"start\" : \"node build/index.js\" }, \"keywords\" : [], \"author\" : \"\" , \"license\" : \"ISC\" } De esta forma podremos programar nuestra aplicaci\u00f3n utilizando typescript y cuando ejecutemos npm start se autocompilara. Este seria el codigo en index.ts por ejemplo: let num : number ; for ( num = 0 ; num < 10 ; num ++ ){ console . log ( num ); } Y esta seria la salida de consola al ejecutar npm start :","title":"Menci\u00f3n especial a TypeScript"},{"location":"typescript/#mencion-especial-a-typescript","text":"Como menci\u00f3n especial, decir que NodeJs tambien es compatible con TypeScript, por lo que podremos desarrollar nuestros proyectos de manera segura y tipada con typescript y luego correrlos en un entorno de nodejs como si de javascript se tratase. Info TypeScript fue desarrollado por Microsoft en 2012. Typescript NO es un lenguaje de programacion en si mismo, si no que es un superset que a\u00f1adido a JavaScript forma TypeScript. Por este motivo TypeScript necesita ser compilado en JavaScript para correr correctamente. Info Algunos paquetes npm estan 100% pensados para JavaScript y no soportar\u00e1n el tipado de typescript, pero una gran cantidad de paquetes si lo soportar\u00e1n!","title":"Menci\u00f3n especial a TypeScript"},{"location":"typescript/#instalar-typescript","text":"Para instalar typescript de manera global en nuestro PC utilizaremos el comando $ sudo npm typescript -g","title":"Instalar TypeScript"},{"location":"typescript/#crear-un-proyecto-en-nodejs-utilizando-ts","text":"Primero crearemos nuestro proyecto de node con npm init Una vez tengamos el proyecto de node, inicializaremos nuestro proyecto de typescript con tsc --init $ npm init $ tsc --init Esto nos creara el archivo de configuracion de typescript tsconfig.json En este archivo buscaremos en la linea 50 la propiedad \"outDir\" y la descomentaremos. Utilizaremos como directorio de salida por ejemplo el directorio /build, para ello: \"outDir\": \"./build\" Y configuraremos algunas cosas del package.json : { \"name\" : \"ejemplo2\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"build/index.js\" , \"scripts\" : { \"prestart\" : \"tsc -b\" , \"start\" : \"node build/index.js\" }, \"keywords\" : [], \"author\" : \"\" , \"license\" : \"ISC\" } De esta forma podremos programar nuestra aplicaci\u00f3n utilizando typescript y cuando ejecutemos npm start se autocompilara. Este seria el codigo en index.ts por ejemplo: let num : number ; for ( num = 0 ; num < 10 ; num ++ ){ console . log ( num ); } Y esta seria la salida de consola al ejecutar npm start :","title":"Crear un proyecto en NodeJs utilizando Ts"}]}